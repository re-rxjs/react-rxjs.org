"use strict";(self.webpackChunkreact_rxjs_org=self.webpackChunkreact_rxjs_org||[]).push([[174],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),u=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),m=n,d=p["".concat(i,".").concat(m)]||p[m]||b[m]||l;return r?a.createElement(d,o(o({ref:t},c),{},{components:r})):a.createElement(d,o({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var u=2;u<l;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8470:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var a=r(3117),n=r(102),l=(r(7294),r(3905)),o=["components"],s={title:"state(observable)",sidebar_label:"state()"},i=void 0,u={unversionedId:"api/core/state",id:"api/core/state",title:"state(observable)",description:"Creates a [StateObservable] from the source Observable.",source:"@site/docs/api/core/state.md",sourceDirName:"api/core",slug:"/api/core/state",permalink:"/docs/api/core/state",draft:!1,editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/api/core/state.md",tags:[],version:"current",frontMatter:{title:"state(observable)",sidebar_label:"state()"},sidebar:"someSidebar",previous:{title:"bind()",permalink:"/docs/api/core/bind"},next:{title:"useStateObservable()",permalink:"/docs/api/core/useStateObservable"}},c={},p=[{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:3},{value:"Factory Overload",id:"factory-overload",level:2},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:3},{value:"See also",id:"see-also",level:2}],b={toc:p},m="wrapper";function d(e){var t=e.components,r=(0,n.Z)(e,o);return(0,l.kt)(m,(0,a.Z)({},b,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Creates a ",(0,l.kt)("a",{parentName:"p",href:"./StateObservable"},(0,l.kt)("inlineCode",{parentName:"a"},"StateObservable"))," from the source Observable."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function state<T>(\n  observable: Observable<T>,\n  defaultValue?: T,\n): StateObservable<T>\n")),(0,l.kt)("h4",{id:"arguments"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"observable"),": The source Observable"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"defaultValue"),": (Optional) value to emit when the source hasn't emitted yet.")),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"StateObservable")," derived from the source observable."),(0,l.kt)("p",null,"The returned ",(0,l.kt)("inlineCode",{parentName:"p"},"StateObservable")," emits the same values as the source Observable, with the following behavior:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"It shares the subscription to all the subscribers."),(0,l.kt)("li",{parentName:"ol"},"It replays the last emitted value to new subscribers."),(0,l.kt)("li",{parentName:"ol"},"It doesn't propagate ",(0,l.kt)("inlineCode",{parentName:"li"},"complete"),"."),(0,l.kt)("li",{parentName:"ol"},"When all subscribers unsubscribe, it unsubscribes from the source and resets the latest value.")),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'import { timer, interval } from "rxjs/operators"\nimport { state } from "@react-rxjs/core"\n\nconst time$ = state(interval(1000))\n\ntime$.subscribe({\n  next: (v) => console.log(v), // Logs 0, 1, 2, ...\n})\n\ntimer(5000)\n  .pipe(switchMap(() => time$))\n  .subscribe({\n    next: (v) => console.log(v), // Logs 5, 6, 7, ...\n  })\n')),(0,l.kt)("h2",{id:"factory-overload"},"Factory Overload"),(0,l.kt)("p",null,"Creates a factory of ",(0,l.kt)("inlineCode",{parentName:"p"},"StateObservable"),", that caches the observables created for each key."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function state<A extends unknown[], T>(\n  getObservable: (...args: A) => Observable<T>,\n  defaultValue?: T | ((...args: A) => T),\n): (...args: A) => StateObservable<T>\n")),(0,l.kt)("h4",{id:"arguments-1"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"getObservable"),": Factory of Observables. The arguments of this function\nwill be the ones used in the hook."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"defaultValue"),": (Optional) value to emit when the source hasn't emitted yet.")),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,"The factory function that returns the ",(0,l.kt)("inlineCode",{parentName:"p"},"StateObservable")," for a given key."),(0,l.kt)("h3",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'const getPrice$ = state((productId: number) =>\n  getProductPriceFromSocket$(productId),\n)\n\ngetPrice$("apples").subscribe({\n  next: (v) => console.log(v),\n})\n')),(0,l.kt)("h2",{id:"see-also"},"See also"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./bind"},(0,l.kt)("inlineCode",{parentName:"a"},"bind()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./useStateObservable"},(0,l.kt)("inlineCode",{parentName:"a"},"useStateObservable()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./StateObservable"},(0,l.kt)("inlineCode",{parentName:"a"},"StateObservable")))))}d.isMDXComponent=!0}}]);