"use strict";(self.webpackChunkreact_rxjs_org=self.webpackChunkreact_rxjs_org||[]).push([[279],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return y}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,y=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(y,o(o({ref:t},u),{},{components:n})):r.createElement(y,o({ref:t},u))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},847:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return y},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],s={title:"partitionByKey()",sidebar_label:"partitionByKey()"},l=void 0,p={unversionedId:"api/utils/partitionByKey",id:"api/utils/partitionByKey",title:"partitionByKey()",description:"Groups the elements from the source stream by using a key selector, and maps",source:"@site/docs/api/utils/partitionByKey.md",sourceDirName:"api/utils",slug:"/api/utils/partitionByKey",permalink:"/docs/api/utils/partitionByKey",draft:!1,editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/api/utils/partitionByKey.md",tags:[],version:"current",frontMatter:{title:"partitionByKey()",sidebar_label:"partitionByKey()"},sidebar:"someSidebar",previous:{title:"mergeWithKey()",permalink:"/docs/api/utils/mergeWithKey"},next:{title:"selfDependent()",permalink:"/docs/api/utils/selfDependent"}},u={},c=[{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Examples",id:"examples",level:3},{value:"See also",id:"see-also",level:2}],m={toc:c},d="wrapper";function y(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Groups the elements from the source stream by using a key selector, and maps\neach of these groups by using a map function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export function partitionByKey<T, K, R>(\n  stream: Observable<T>,\n  keySelector: (value: T) => K,\n  streamSelector: (grouped: Observable<T>, key: K) => Observable<R>,\n): [(key: K) => GroupedObservable<K, R>, Observable<K[]>]\n")),(0,i.kt)("h4",{id:"arguments"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stream"),": Input stream"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"keySelector"),": Function that specifies the key for each element in ",(0,i.kt)("inlineCode",{parentName:"li"},"stream")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"streamSelector"),": Function to apply to each resulting group")),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2]"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A function that accepts a key and returns a stream for the group of that key.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A stream with the list of active keys"))),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const source = interval(1000);\nconst [getGroupByKey, keys$] = partitionByKey(\n  source,\n  x => x % 2 == 0 ? "even" : "odd",\n  (groupedObservable$, key) => groupedObservable$.pipe(map(x => `${x} is ${key}`))\n);\n\nconst [useEven, even$] = bind(getGroupByKey("even"));\nconst [useOdd, odd$] = bind(getGroupByKey("odd"));\nconst [useKeys] = bind(keys$);\n\nfunction MyComponent() {\n  const odd = useOdd();\n  const even = useEven();\n  const keys = useKeys();\n\n  return (\n    <>\n      <div>Your keys are: {keys.join(", ")}</div>\n      <div>{odd}</div>\n      <div>{even}</div>\n    </>\n  );\n}\n')),(0,i.kt)("p",null,"A more typical list example. The list component can bind the list of keys\nwhile the item component binds the stream for each item, eliminating\nunnecessary renders:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'interface Pet {\n  id: number;\n  pet: string,\n  pos?: number;\n}\n\nconst petNames = ["Fluffy", "Bella", "Nala", "Nocturne", "Teddy"]\n               .map((pet, id): Pet => ({pet, id}));\n\nconst [petUpdate$, updatePet] = createSignal<Pet>();\n\n// Let\'s line up our pets\nconst petRace$ = merge(of(...petNames), petUpdate$);\n\nconst [petByID, petIds$] = partitionByKey(\n  petRace$,\n  x => x.id,\n)\n\nconst [usePetByID] = bind((id: number) => petByID(id));\nconst [usePetIDs] = bind(petIds$);\n\nconst PetItem = ({petID}: {petID: number}) => {\n  const pet = usePetByID(petID);\n\n  return (\n    <li>\n      <div style={{width:\'100%\', textAlign:\'right\'}}>\n        {pet.pet}\n      </div>\n      <br />\n      <div style={{textAlign:\'left\'}}>\n        {\'*\'.repeat(pet.pos || 1)}\n      </div>\n    </li>\n  );\n}\n\nconst PetList = () => {\n  const petIDs = usePetIDs();\n\n  return (<ul>{petIDs.map(x => (<PetItem key={x} petID={x} />))}</ul>);\n}\n')),(0,i.kt)("h2",{id:"see-also"},"See also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"combineKeys"},(0,i.kt)("inlineCode",{parentName:"a"},"combineKeys()")))))}y.isMDXComponent=!0}}]);