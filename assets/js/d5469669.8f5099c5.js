"use strict";(self.webpackChunkreact_rxjs_org=self.webpackChunkreact_rxjs_org||[]).push([[905],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9233:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var n=r(3117),a=r(102),i=(r(7294),r(3905)),o=["components"],l={title:"split(keySelector)",sidebar_label:"split()"},s=void 0,p={unversionedId:"api/utils/split",id:"api/utils/split",title:"split(keySelector)",description:"This function is deprecated. partitionByKey covers its intended use case.",source:"@site/docs/api/utils/split.md",sourceDirName:"api/utils",slug:"/api/utils/split",permalink:"/docs/api/utils/split",draft:!1,editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/api/utils/split.md",tags:[],version:"current",frontMatter:{title:"split(keySelector)",sidebar_label:"split()"},sidebar:"someSidebar",previous:{title:"switchMapSuspended()",permalink:"/docs/api/utils/switchMapSuspended"},next:{title:"collect()",permalink:"/docs/api/utils/collect"}},c={},u=[{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Description",id:"description",level:3},{value:"See also",id:"see-also",level:2}],d={toc:u},m="wrapper";function f(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)(m,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This function is deprecated. ",(0,i.kt)("a",{parentName:"p",href:"partitionByKey"},(0,i.kt)("inlineCode",{parentName:"a"},"partitionByKey"))," covers its intended use case.")),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"https://rxjs.dev/guide/v6/pipeable-operators"},"pipeable operator")," that groups the items emitted by the source based on the\n",(0,i.kt)("inlineCode",{parentName:"p"},"keySelector")," function, emitting one Observable for each group."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function split<T, K>(keySelector: (value: T) => K, streamSelector?: (grouped: Observable<T>, key: K) => Observable<R>): \n  OperatorFunction<T, GroupedObservable<K, T>>\n")),(0,i.kt)("h4",{id:"arguments"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"keySelector"),": A function that receives an item and returns the key of that item's group."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"streamSelector"),": (Optional) The function to apply to each grouped Observable. Default: identity.")),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://rxjs.dev/api/index/interface/OperatorFunction"},(0,i.kt)("inlineCode",{parentName:"a"},"OperatorFunction<T, GroupedObservable<K, T>>")),": An Observable that emits a grouped Observable for each key\nprovided by the key selector function. The values from the source Observable emitted in each grouped Observable\nare optional transformed by the stream selector function, if specified."),(0,i.kt)("h3",{id:"description"},"Description"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"split")," will subscribe to each grouped Observable and share the result to every\ninner subscriber of that group. This inner Observable can be mapped to another\nObservable through the ",(0,i.kt)("inlineCode",{parentName:"p"},"streamSelector")," argument."),(0,i.kt)("h2",{id:"see-also"},"See also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"collect"},(0,i.kt)("inlineCode",{parentName:"a"},"collect(filter)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"collectValues"},(0,i.kt)("inlineCode",{parentName:"a"},"collectValues()"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../tutorial/todos#creating-a-stream-for-each-todo"},"Todo App Tutorial"))))}f.isMDXComponent=!0}}]);