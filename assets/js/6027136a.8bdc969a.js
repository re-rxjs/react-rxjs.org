"use strict";(self.webpackChunkreact_rxjs_org=self.webpackChunkreact_rxjs_org||[]).push([[506],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9289:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),l=["components"],o={title:"mergeWithKey(inputObject)",sidebar_label:"mergeWithKey()"},u=void 0,c={unversionedId:"api/utils/mergeWithKey",id:"api/utils/mergeWithKey",title:"mergeWithKey(inputObject)",description:"Emits the values from all the streams of the provided object, in a result",source:"@site/docs/api/utils/mergeWithKey.md",sourceDirName:"api/utils",slug:"/api/utils/mergeWithKey",permalink:"/docs/api/utils/mergeWithKey",draft:!1,editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/api/utils/mergeWithKey.md",tags:[],version:"current",frontMatter:{title:"mergeWithKey(inputObject)",sidebar_label:"mergeWithKey()"},sidebar:"someSidebar",previous:{title:"createKeyedSignal()",permalink:"/docs/api/utils/createKeyedSignal"},next:{title:"partitionByKey()",permalink:"/docs/api/utils/partitionByKey"}},s={},p=[{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:3},{value:"See also",id:"see-also",level:2}],m={toc:p},d="wrapper";function f(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Emits the values from all the streams of the provided object, in a result\nwhich provides the key of the stream of that emission."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function mergeWithKey<\n  O extends { [P in keyof any]: ObservableInput<any> },\n  OT extends {\n    [K in keyof O]: O[K] extends ObservableInput<infer V>\n      ? { type: K; payload: V }\n      : unknown\n  }\n>(inputObject: O, concurrent?: number, scheduler?: SchedulerLike): \n  Observable<OT[keyof O]>\n")),(0,i.kt)("h4",{id:"arguments"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"inputObject"),": An object that contains multiple streams, indexed by key."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"concurrent"),": (Optional) Maximum number of input Observables being subscribed\nto concurrently. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"Number.POSITIVE_INFINITY")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scheduler"),": (Optional) The ",(0,i.kt)("a",{parentName:"li",href:"https://rxjs.dev/api/index/interface/SchedulerLike"},(0,i.kt)("inlineCode",{parentName:"a"},"SchedulerLike"))," to use for managing concurrency\nof input Observables. Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Observable<OT[keyof O]>"),": An observable that emits a flux-like object that contains 2 properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type"),": the key of the stream that has emitted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"payload"),": the emitted value.")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Subject } from "rxjs"\nimport { scan, startWith } from \'rxjs/operators\'\nimport { mergeWithKey, createSignal } from \'@react-rxjs/utils\'\n\nconst [inc$, doInc] = createSignal();\nconst [dec$, doDec] = createSignal();\nconst [resetTo$, doResetTo] = createSignal<number>();\n\nconst counter$ = mergeWithKey({\n  inc$,\n  dec$,\n  resetTo$,\n}).pipe(\n  scan((acc, current) => {\n    switch (current.type) {\n      case "inc$":\n        return acc + 1\n      case "dec$":\n        return acc - 1\n      case "resetTo$":\n        return current.payload\n      default:\n        return acc\n    }\n  }, 0),\n  startWith(0),\n)\n')),(0,i.kt)("h2",{id:"see-also"},"See also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://rxjs.dev/api/index/function/merge"},(0,i.kt)("inlineCode",{parentName:"a"},"merge"))," (RxJS)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../tutorial/todos#creating-a-single-stream-for-all-the-user-events"},"Todo App Tutorial"))))}f.isMDXComponent=!0}}]);