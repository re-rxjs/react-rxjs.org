"use strict";(self.webpackChunkreact_rxjs_org=self.webpackChunkreact_rxjs_org||[]).push([[212],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(r),f=a,d=u["".concat(p,".").concat(f)]||u[f]||m[f]||o;return r?n.createElement(d,s(s({ref:t},c),{},{components:r})):n.createElement(d,s({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4394:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var n=r(3117),a=r(102),o=(r(7294),r(3905)),s=["components"],i={title:"shareLatest()"},p=void 0,l={unversionedId:"api/core/shareLatest",id:"api/core/shareLatest",title:"shareLatest()",description:"An RxJS [pipeable operator] which multicasts the source stream and replays the",source:"@site/docs/api/core/shareLatest.md",sourceDirName:"api/core",slug:"/api/core/shareLatest",permalink:"/docs/api/core/shareLatest",draft:!1,editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/api/core/shareLatest.md",tags:[],version:"current",frontMatter:{title:"shareLatest()"},sidebar:"someSidebar",previous:{title:"useStateObservable()",permalink:"/docs/api/core/useStateObservable"},next:{title:"SUSPENSE",permalink:"/docs/api/core/suspense"}},c={},u=[{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:3},{value:"See also",id:"see-also",level:2}],m={toc:u},f="wrapper";function d(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)(f,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"An RxJS ",(0,o.kt)("a",{parentName:"p",href:"https://rxjs.dev/guide/v6/pipeable-operators"},"pipeable operator")," which multicasts the source stream and replays the\nlatest emitted value."),(0,o.kt)("p",null,"It's a utility function kept for historical purposes. Since RxJS@^7.0.0 released, it's equivalent to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { share } from 'rxjs/operators';\n\nfunction shareLatest<T>() {\n  return share<T>({\n    connector: () => new ReplaySubject(1)\n  })\n}\n")),(0,o.kt)("h4",{id:"returns"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://rxjs.dev/api/index/interface/MonoTypeOperatorFunction"},(0,o.kt)("inlineCode",{parentName:"a"},"MonoTypeOperatorFunction<T>")),": An Observable that shares the latest emitted value from the\nsource Observable with all subscribers, and restarts the stream when it completes or errors."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { filter, map } from "rxjs/operators"\nimport { shareLatest } from "@react-rxjs/core"\n\nconst activePlanetName$ = planet$.pipe(\n  filter((planet) => planet.isActive),\n  map((planet) => planet.name),\n  shareLatest(),\n)\n')),(0,o.kt)("h2",{id:"see-also"},"See also"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://rxjs.dev/api/operators/share"},(0,o.kt)("inlineCode",{parentName:"a"},"share"))," (RxJS)")))}d.isMDXComponent=!0}}]);