"use strict";(self.webpackChunkreact_rxjs_org=self.webpackChunkreact_rxjs_org||[]).push([[597],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),y=a,d=u["".concat(p,".").concat(y)]||u[y]||m[y]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=y;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},3892:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],s={title:"combineKeys()",sidebar_label:"combineKeys()"},p=void 0,l={unversionedId:"api/utils/combineKeys",id:"api/utils/combineKeys",title:"combineKeys()",description:"Creates a stream that constructs a Map with the latest value of the inner stream",source:"@site/docs/api/utils/combineKeys.md",sourceDirName:"api/utils",slug:"/api/utils/combineKeys",permalink:"/docs/api/utils/combineKeys",draft:!1,editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/api/utils/combineKeys.md",tags:[],version:"current",frontMatter:{title:"combineKeys()",sidebar_label:"combineKeys()"},sidebar:"someSidebar",previous:{title:"StateObservable",permalink:"/docs/api/core/StateObservable"},next:{title:"contextBinder()",permalink:"/docs/api/utils/contextBinder"}},c={},u=[{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Examples",id:"examples",level:3},{value:"See also",id:"see-also",level:2}],m={toc:u},y="wrapper";function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)(y,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Creates a stream that constructs a Map with the latest value of the inner stream\nof each key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export const combineKeys = <K, T>(\n  keys$: Observable<Array<K> | Set<K>>,\n  getInner$: (key: K) => Observable<T>,\n): Observable<Map<K, T>>\n")),(0,o.kt)("h4",{id:"arguments"},"Arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"keys$"),": Stream of the list of keys to subscribe to."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"getInner$"),": Function that returns the stream for each key.")),(0,o.kt)("h4",{id:"returns"},"Returns"),(0,o.kt)("p",null,"A stream with a map containing the latest value from the stream of each key."),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("p",null,"You're typically going to call this after ",(0,o.kt)("inlineCode",{parentName:"p"},"partitionByKey()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const [getByKey, keys$] = partitionByKey(source$, x => x.key);\nconst combined$ = combineKeys(keys$, getByKey);\n")),(0,o.kt)("p",null,"Here it is in action, picking up from the ",(0,o.kt)("a",{parentName:"p",href:"partitionByKey"},(0,o.kt)("inlineCode",{parentName:"a"},"partitionByKey()")),"\nexample. You have a stream representing the list of pets, you have a function\nthat returns the stream associated with each pet, and now combineKeys() gives\nyou a stream that emits a map of this whole data structure whenever any of it\nchanges. If you're careful about where you bind these you can save a lot of\ncomponent updates:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface Pet {\n  id: number;\n  pet: string,\n  pos: number;\n}\n\nconst petNames = ["Fluffy", "Bella", "Nala", "Nocturne", "Teddy"];\n\nconst [petUpdate$, updatePet] = createSignal<Pet>();\n\nconst petRace$ = petUpdate$.pipe(startWith(\n  ...petNames.map((pet, id): Pet => ({pet, id, pos: 1})),\n));\n\nconst [petByID, petIds$] = partitionByKey(petRace$, x => x.id)\nconst keyMap$ = combineKeys(petIds$, petByID);\n\nconst leadingPet$ = keyMap$.pipe(map(x => // map to pet with highest pos\n  Array.from(x.entries())\n    .sort(([k1,v1], [k2,v2]) => v2.pos - v1.pos)[0][1]\n));\n\nconst advancingPet$: Observable<Pet> = interval(1000).pipe(\n  withLatestFrom(keyMap$),\n  map(([_, x]) => x),\n  takeWhile(x => {\n    for (let [k,v] of x) {\n      if (v.pos == 20) return false  // win condition\n    }\n    return true;\n  }),\n  map((x: Map<number, Pet>) =>\n    x.get(Math.floor(Math.random() * x.size)) as Pet),\n  map(pet => ({...pet, pos: pet.pos + 1})),  // increment position\n  tap(updatePet),\n);\n\nconst [usePetIDs] = bind(petIds$);\nconst [usePetByID] = bind((petId:number) => petByID(petId));\nconst [useLeader] = bind(leadingPet$, null);\nconst [useAdvancingPet] = bind(advancingPet$, null);\n')),(0,o.kt)("h2",{id:"see-also"},"See also"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"partitionByKey"},(0,o.kt)("inlineCode",{parentName:"a"},"partitionByKey()")))))}d.isMDXComponent=!0}}]);