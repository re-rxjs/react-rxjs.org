"use strict";(self.webpackChunkreact_rxjs_org=self.webpackChunkreact_rxjs_org||[]).push([[528],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),b=a,m=c["".concat(i,".").concat(b)]||c[b]||d[b]||o;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=b;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},2582:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),l=["components"],s={title:"bind(observable)",sidebar_label:"bind()"},i=void 0,u={unversionedId:"api/core/bind",id:"api/core/bind",title:"bind(observable)",description:"Binds an Observable to React, and returns a hook and shared stream representing the source Observable.",source:"@site/docs/api/core/bind.md",sourceDirName:"api/core",slug:"/api/core/bind",permalink:"/docs/api/core/bind",draft:!1,editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/api/core/bind.md",tags:[],version:"current",frontMatter:{title:"bind(observable)",sidebar_label:"bind()"},sidebar:"someSidebar",previous:{title:"Todo App",permalink:"/docs/tutorial/todos"},next:{title:"state()",permalink:"/docs/api/core/state"}},p={},c=[{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:3},{value:"Factory Overload",id:"factory-overload",level:2},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:3},{value:"See also",id:"see-also",level:2}],d={toc:c},b="wrapper";function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)(b,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Binds an Observable to React, and returns a hook and shared stream representing the source Observable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function bind<T>(\n  observable: Observable<T>,\n  defaultValue?: T,\n) {\n  const state$ = state(observable, defaultValue);\n\n  return [\n    () => useStateObservable(state$),\n    state$\n  ];\n}\n")),(0,o.kt)("h4",{id:"arguments"},"Arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"observable"),": The source Observable to be used by the hook."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"defaultValue"),": (Optional) value to return when the source hasn't emitted yet.")),(0,o.kt)("h4",{id:"returns"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"[1, 2]"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"A React Hook that yields the latest emitted value of the Observable. If the\nObservable doesn't synchronously emit a value, it will return the\n",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," if provided, otherwise it will leverage React Suspense\nwhile it's waiting for the first value. It's equivalent to ",(0,o.kt)("inlineCode",{parentName:"p"},"useStateObservable"),"\nof the resulting StateObservable.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"StateObservable")," that the hook uses: It also replays back the latest\nvalue emitted. It can be used for composing other streams that depend on it."))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"bind")," doesn't propagate completions from the source stream - the shared\nsubscription is closed as soon as there are no subscribers to that Observable.")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { scan } from "rxjs/operators"\nimport { bind } from "@react-rxjs/core"\n\nconst [useCounter, counter$] = bind(\n  clicks$.pipe(scan((prev) => prev + 1, 0)),\n  0,\n)\n\nfunction CounterDisplay() {\n  const counter = useCounter()\n\n  return <div>{counter}</div>\n}\n')),(0,o.kt)("h2",{id:"factory-overload"},"Factory Overload"),(0,o.kt)("p",null,"Binds an Observable factory function to React, and returns a hook and shared stream representing the created Observables."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function bind<A extends unknown[], O>(\n  getObservable: (...args: A) => Observable<O>,\n  defaultValue?: (...args: A) => T | T,\n) {\n  const state$ = state(getObservable, defaultValue);\n\n  return [\n    (...args: A) => useStateObservable(state$(...args)),\n    state$\n  ];\n}\n")),(0,o.kt)("h4",{id:"arguments-1"},"Arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"getObservable"),": Factory of Observables. The arguments of this function\nwill be the ones used in the hook.")),(0,o.kt)("h4",{id:"returns-1"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"[1, 2]"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"A React hook with the same arguments as the factory function. This hook\nwill yield the latest update from the Observable returned from the factory function.\nIf the Observable doesn't synchronously emit a value, it will return the\n",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," if provided, otherwise it will leverage React Suspense\nwhile it's waiting for the first value. It's equivalent to ",(0,o.kt)("inlineCode",{parentName:"p"},"useStateObservable"),"\nof the resulting StateObservable.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The factory function that returns the ",(0,o.kt)("inlineCode",{parentName:"p"},"StateObservable")," that the hook uses\nfor the specific arguments. It can be used for composing other streams that depend on it."))),(0,o.kt)("h3",{id:"example-1"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const [useStory, getStory$] = bind((storyId: number) =>\n  getStoryWithUpdates$(storyId),\n)\n\nconst Story: React.FC<{ id: number }> = ({ id }) => {\n  const story = useStory(id)\n\n  return (\n    <article>\n      <h1>{story.title}</h1>\n      <p>{story.description}</p>\n    </article>\n  )\n}\n")),(0,o.kt)("h2",{id:"see-also"},"See also"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./state"},(0,o.kt)("inlineCode",{parentName:"a"},"state()"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./useStateObservable"},(0,o.kt)("inlineCode",{parentName:"a"},"useStateObservable()")))))}m.isMDXComponent=!0}}]);