"use strict";(self.webpackChunkreact_rxjs_org=self.webpackChunkreact_rxjs_org||[]).push([[880],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||y[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5253:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],l={title:"toKeySet()",sidebar_label:"toKeySet()"},c=void 0,s={unversionedId:"api/utils/toKeySet",id:"api/utils/toKeySet",title:"toKeySet()",description:"Operator function that maps a stream of KeyChanges into a Set that contains the",source:"@site/docs/api/utils/toKeySet.md",sourceDirName:"api/utils",slug:"/api/utils/toKeySet",permalink:"/docs/api/utils/toKeySet",draft:!1,editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/api/utils/toKeySet.md",tags:[],version:"current",frontMatter:{title:"toKeySet()",sidebar_label:"toKeySet()"},sidebar:"someSidebar",previous:{title:"switchMapSuspended()",permalink:"/docs/api/utils/switchMapSuspended"},next:{title:"split()",permalink:"/docs/api/utils/split"}},p={},u=[{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:3},{value:"See also",id:"see-also",level:2}],y={toc:u},m="wrapper";function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)(m,(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Operator function that maps a stream of KeyChanges into a Set that contains the\nactive keys."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function toKeySet<K>(): OperatorFunction<KeyChanges<K>, Set<K>>\n")),(0,o.kt)("h4",{id:"returns"},"Returns"),(0,o.kt)("p",null,"An ",(0,o.kt)("a",{parentName:"p",href:"https://rxjs.dev/api/index/interface/OperatorFunction"},"OperatorFunction")," that will aggregate the key changes from the stream into\na Set with those keys."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Call to service mocked for the example\nconst priceStream$ = from([\n  {\n    symbol: \"AUDCHF\",\n    price: 1.32,\n  },\n  {\n    symbol: \"GOLD\",\n    price: 1.213,\n  },\n  {\n    symbol: \"CRYPTO\",\n    price: 2.45,\n  },\n  {\n    symbol: \"GOLD\",\n    price: 1.27,\n  },\n]).pipe(\n  // Add delay to every new price.\n  concatMap((value) => of(value).pipe(delay(100))),\n)\n\nconst [lastPriceOfSymbol, symbolChange$] = partitionByKey(\n  priceStream$,\n  (x) => x.symbol,\n)\n\nconst activeSymbols$ = toKeySet(symbolChange$).pipe(\n  map((keySet) => Array.from(keySet)),\n)\n\nactiveSymbols$.subscribe((keys) => console.log(keys))\n// Will log:\n// ['AUDCHF']\n// ['AUDCHF', 'GOLD']\n// ['AUDCHF', 'GOLD', 'CRYPTO']\n")),(0,o.kt)("h2",{id:"see-also"},"See also"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"partitionByKey"},(0,o.kt)("inlineCode",{parentName:"a"},"partitionByKey()")))))}f.isMDXComponent=!0}}]);