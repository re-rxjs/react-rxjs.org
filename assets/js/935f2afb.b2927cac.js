"use strict";(self.webpackChunkreact_rxjs_org=self.webpackChunkreact_rxjs_org||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"someSidebar":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"Motivation","href":"/docs/motivation","docId":"motivation"},{"type":"link","label":"Core Concepts","href":"/docs/core-concepts","docId":"core-concepts"},{"type":"link","label":"Getting Started","href":"/docs/getting-started","docId":"getting-started"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Tutorial","items":[{"type":"link","label":"Github Issues Viewer","href":"/docs/tutorial/github-issues","docId":"tutorial/github-issues"},{"type":"link","label":"Todo App","href":"/docs/tutorial/todos","docId":"tutorial/todos"}],"collapsed":true,"collapsible":true},{"type":"category","label":"API Reference","items":[{"type":"category","label":"Core","items":[{"type":"link","label":"bind()","href":"/docs/api/core/bind","docId":"api/core/bind"},{"type":"link","label":"state()","href":"/docs/api/core/state","docId":"api/core/state"},{"type":"link","label":"useStateObservable()","href":"/docs/api/core/useStateObservable","docId":"api/core/useStateObservable"},{"type":"link","label":"shareLatest()","href":"/docs/api/core/shareLatest","docId":"api/core/shareLatest"},{"type":"link","label":"SUSPENSE","href":"/docs/api/core/suspense","docId":"api/core/suspense"},{"type":"link","label":"<Subscribe />","href":"/docs/api/core/subscribe","docId":"api/core/subscribe"},{"type":"link","label":"<RemoveSubscribe />","href":"/docs/api/core/removeSubscribe","docId":"api/core/removeSubscribe"},{"type":"link","label":"StateObservable","href":"/docs/api/core/StateObservable","docId":"api/core/StateObservable"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Utils","items":[{"type":"link","label":"combineKeys()","href":"/docs/api/utils/combineKeys","docId":"api/utils/combineKeys"},{"type":"link","label":"contextBinder()","href":"/docs/api/utils/contextBinder","docId":"api/utils/contextBinder"},{"type":"link","label":"createSignal()","href":"/docs/api/utils/createSignal","docId":"api/utils/createSignal"},{"type":"link","label":"createKeyedSignal()","href":"/docs/api/utils/createKeyedSignal","docId":"api/utils/createKeyedSignal"},{"type":"link","label":"mergeWithKey()","href":"/docs/api/utils/mergeWithKey","docId":"api/utils/mergeWithKey"},{"type":"link","label":"partitionByKey()","href":"/docs/api/utils/partitionByKey","docId":"api/utils/partitionByKey"},{"type":"link","label":"selfDependent()","href":"/docs/api/utils/selfDependent","docId":"api/utils/selfDependent"},{"type":"link","label":"suspend()","href":"/docs/api/utils/suspend","docId":"api/utils/suspend"},{"type":"link","label":"suspended()","href":"/docs/api/utils/suspended","docId":"api/utils/suspended"},{"type":"link","label":"switchMapSuspended()","href":"/docs/api/utils/switchMapSuspended","docId":"api/utils/switchMapSuspended"},{"type":"link","label":"toKeySet()","href":"/docs/api/utils/toKeySet","docId":"api/utils/toKeySet"},{"type":"category","label":"Deprecated","items":[{"type":"link","label":"split()","href":"/docs/api/utils/split","docId":"api/utils/split"},{"type":"link","label":"collect()","href":"/docs/api/utils/collect","docId":"api/utils/collect"},{"type":"link","label":"collectValues()","href":"/docs/api/utils/collectValues","docId":"api/utils/collectValues"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true}]},"docs":{"api/core/bind":{"id":"api/core/bind","title":"bind(observable)","description":"Binds an Observable to React, and returns a hook and shared stream representing the source Observable.","sidebar":"someSidebar"},"api/core/removeSubscribe":{"id":"api/core/removeSubscribe","title":"<RemoveSubscribe />","description":"A React Component that prevents its children from using a parent ``.","sidebar":"someSidebar"},"api/core/shareLatest":{"id":"api/core/shareLatest","title":"shareLatest()","description":"An RxJS [pipeable operator] which multicasts the source stream and replays the","sidebar":"someSidebar"},"api/core/state":{"id":"api/core/state","title":"state(observable)","description":"Creates a [StateObservable] from the source Observable.","sidebar":"someSidebar"},"api/core/StateObservable":{"id":"api/core/StateObservable","title":"StateObservable","description":"Represents an Observable state. It has the following properties:","sidebar":"someSidebar"},"api/core/subscribe":{"id":"api/core/subscribe","title":"<Subscribe />","description":"A React Component that manages the subscription of its children\'s Observables.","sidebar":"someSidebar"},"api/core/suspense":{"id":"api/core/suspense","title":"SUSPENSE","description":"SUSPENSE is a special symbol that can be emitted from observables to let the React hook","sidebar":"someSidebar"},"api/core/useStateObservable":{"id":"api/core/useStateObservable","title":"useStateObservable(observable)","description":"Gets the latest value from an observable returned by state.","sidebar":"someSidebar"},"api/utils/collect":{"id":"api/utils/collect","title":"collect(filter)","description":"This function is deprecated. partitionByKey covers its intended use case.","sidebar":"someSidebar"},"api/utils/collectValues":{"id":"api/utils/collectValues","title":"collectValues()","description":"This function is deprecated. partitionByKey with","sidebar":"someSidebar"},"api/utils/combineKeys":{"id":"api/utils/combineKeys","title":"combineKeys()","description":"Creates a stream that constructs a Map with the latest value of the inner stream","sidebar":"someSidebar"},"api/utils/contextBinder":{"id":"api/utils/contextBinder","title":"contextBinder()","description":"Returns a version of bind where its hook will have the first parameters bound","sidebar":"someSidebar"},"api/utils/createKeyedSignal":{"id":"api/utils/createKeyedSignal","title":"createKeyedSignal()","description":"Creates a Signal grouped by a key. Essentially splits the producer and consumer","sidebar":"someSidebar"},"api/utils/createSignal":{"id":"api/utils/createSignal","title":"createSignal()","description":"Creates a Signal: it\'s like a subject, but with the consumer and the producer split.","sidebar":"someSidebar"},"api/utils/mergeWithKey":{"id":"api/utils/mergeWithKey","title":"mergeWithKey(inputObject)","description":"Emits the values from all the streams of the provided object, in a result","sidebar":"someSidebar"},"api/utils/partitionByKey":{"id":"api/utils/partitionByKey","title":"partitionByKey()","description":"Groups the elements from the source stream by using a key selector, and maps","sidebar":"someSidebar"},"api/utils/selfDependent":{"id":"api/utils/selfDependent","title":"selfDependent()","description":"A utility for creating observables that have circular dependencies.","sidebar":"someSidebar"},"api/utils/split":{"id":"api/utils/split","title":"split(keySelector)","description":"This function is deprecated. partitionByKey covers its intended use case.","sidebar":"someSidebar"},"api/utils/suspend":{"id":"api/utils/suspend","title":"suspend(observable)","description":"A RxJS creation operator that prepends a [SUSPENSE] to the source Observable.","sidebar":"someSidebar"},"api/utils/suspended":{"id":"api/utils/suspended","title":"suspended()","description":"The [pipeable] version of [suspend]. Prepends a [SUSPENSE] to the source Observable.","sidebar":"someSidebar"},"api/utils/switchMapSuspended":{"id":"api/utils/switchMapSuspended","title":"switchMapSuspended()","description":"Like switchMap], but applying a [startWith(SUSPENSE) to the inner Observable.","sidebar":"someSidebar"},"api/utils/toKeySet":{"id":"api/utils/toKeySet","title":"toKeySet()","description":"Operator function that maps a stream of KeyChanges into a Set that contains the","sidebar":"someSidebar"},"core-concepts":{"id":"core-concepts","title":"Core Concepts","description":"Push vs Pull","sidebar":"someSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"Installation","sidebar":"someSidebar"},"motivation":{"id":"motivation","title":"Motivation","description":"As you probably already know, React\'s state management system is not Reactive.","sidebar":"someSidebar"},"tutorial/github-issues":{"id":"tutorial/github-issues","title":"Github Issues Viewer","description":"This tutorial assumes you are already familiar with both RxJS","sidebar":"someSidebar"},"tutorial/todos":{"id":"tutorial/todos","title":"Todo App","description":"This tutorial assumes you have gone through the Github Issues Viewer","sidebar":"someSidebar"}}}')}}]);