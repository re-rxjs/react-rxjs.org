"use strict";(self.webpackChunkreact_rxjs_org=self.webpackChunkreact_rxjs_org||[]).push([[599],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=a,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(g,l(l({ref:t},p),{},{components:n})):r.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1710:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return c}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),l=["components"],o={title:"createSignal()",sidebar_label:"createSignal()"},s=void 0,u={unversionedId:"api/utils/createSignal",id:"api/utils/createSignal",title:"createSignal()",description:"Creates a Signal: it's like a subject, but with the consumer and the producer split.",source:"@site/docs/api/utils/createSignal.md",sourceDirName:"api/utils",slug:"/api/utils/createSignal",permalink:"/docs/api/utils/createSignal",draft:!1,editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/api/utils/createSignal.md",tags:[],version:"current",frontMatter:{title:"createSignal()",sidebar_label:"createSignal()"},sidebar:"someSidebar",previous:{title:"contextBinder()",permalink:"/docs/api/utils/contextBinder"},next:{title:"createKeyedSignal()",permalink:"/docs/api/utils/createKeyedSignal"}},p={},c=[{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Examples",id:"examples",level:3},{value:"See also",id:"see-also",level:2}],m={toc:c},d="wrapper";function g(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Creates a Signal: it's like a subject, but with the consumer and the producer split."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export function createSignal<A extends unknown[], T>(\n  mapper?: (...args: A) => T,\n): [Observable<T>, (...args: A) => void]\n")),(0,i.kt)("h4",{id:"arguments"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"mapper?"),": (Optional) A function for mapping the arguments of the emitter function into\nthe value of the Observable."),(0,i.kt)("p",{parentName:"li"},"  Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"(v: Payload) => v")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2]"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The observable for the signal")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The emitter function"))),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("p",null,"Void signal (no payload):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const [buttonPresses$, pressButton] = createSignal();\n// ...\n<button onClick={() => pressButton()}>...</button>\n")),(0,i.kt)("p",null,"Taking a payload. Note that without the type parameter you'll get a void\nsignal as above:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const [itemComplete$, doCompleteItem] = createSignal<number>();\n\n// ...\n\n<button onClick={() => doCompleteItem(id)}>...</button>\n")),(0,i.kt)("p",null,"Mapping the emitter function's arguments to the resulting emission:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const mapper = (id: number, status: Status) => ({ id, status });\nconst [statusChange$, setStatus] = createSignal(mapper);\n// statusChange$ is Observable<{id: number, status: Status}>\n// setStatus is (id: number, status: Status) => void\n\n// ...\n\n<button onClick={() => setStatus(id, Status.Complete)}>...</button>\n")),(0,i.kt)("h2",{id:"see-also"},"See also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"createKeyedSignal"},(0,i.kt)("inlineCode",{parentName:"a"},"createKeyedSignal()")))))}g.isMDXComponent=!0}}]);