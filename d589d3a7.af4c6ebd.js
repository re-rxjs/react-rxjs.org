(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return y})),n.d(t,"metadata",(function(){return N})),n.d(t,"rightToc",(function(){return T})),n.d(t,"default",(function(){return w}));var r=n(2),a=n(6),c=n(0),o=n.n(c),s=n(95),i=n(147),l=n(113),u=n(179),b=Object(u.a)(),p=b[0],d=b[1],m=Object(l.c)(p,""),h=m[0],j=m[1];function g(){var e=h();return o.a.createElement("div",null,o.a.createElement("input",{type:"text",value:e,placeholder:"Type something...",onChange:function(e){return d(e.target.value)}}),o.a.createElement("br",null),"Echo: ",e)}var x=Object(l.c)(j.pipe(Object(i.a)((function(e){return e.length})))),O=x[0];x[1];function v(){var e=O();return o.a.createElement(o.a.Fragment,null,"Character Count: ",e)}function C(){return o.a.createElement("div",null,o.a.createElement(l.b,null,o.a.createElement(g,null),o.a.createElement(v,null)))}var f=n(178),y={title:"Getting Started"},N={unversionedId:"getting-started",id:"getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Installation",source:"@site/docs/getting-started.md",slug:"/getting-started",permalink:"/docs/getting-started",editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/getting-started.md",version:"current",sidebar:"someSidebar",previous:{title:"Core Concepts",permalink:"/docs/core-concepts"},next:{title:"Github Issues Viewer",permalink:"/docs/tutorial/github-issues"}},T=[{value:"Installation",id:"installation",children:[]},{value:"Create a hook from an observable",id:"create-a-hook-from-an-observable",children:[]},{value:"Next steps",id:"next-steps",children:[]}],k={rightToc:T};function w(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},k,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"installation"},"Installation"),Object(s.b)("p",null,"React-RxJS is published in npm as ",Object(s.b)("inlineCode",{parentName:"p"},"@react-rxjs/core")),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"npm i rxjs @react-rxjs/core @react-rxjs/utils\n")),Object(s.b)("p",null,"or using yarn"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"yarn add rxjs @react-rxjs/core @react-rxjs/utils\n")),Object(s.b)("h2",{id:"create-a-hook-from-an-observable"},"Create a hook from an observable"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"@react-rxjs/core")," exports a function called ",Object(s.b)("inlineCode",{parentName:"p"},"bind")," which is used to connect a stream to a hook."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import { bind } from "@react-rxjs/core"\nimport { createSignal } from "@react-rxjs/utils"\n\n// A signal is an entry point to react-rxjs. It\'s equivalent to using a subject\nconst [textChange$, setText] = createSignal();\n\nconst [useText, text$] = bind(textChange$, "")\n\nfunction TextInput() {\n  const text = useText()\n\n  return (\n    <div>\n      <input\n        type="text"\n        value={text}\n        placeholder="Type something..."\n        onChange={(e) => setText(e.target.value)}\n      />\n      <br />\n      Echo: {text}\n    </div>\n  )\n}\n')),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"bind")," returns a tuple that contains the hook, plus the underlying shared observable so it can be used by other streams:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import { map } from "rxjs/operators"\nimport { bind, Subscribe } from "@react-rxjs/core"\n\n// Previously...\n// const [useText, text$] = bind(...);\n\nconst [useCharCount, charCount$] = bind(\n  text$.pipe(\n    map((text) => text.length)\n  )\n)\n\nfunction CharacterCount() {\n  const count = useCharCount()\n\n  return <>Character Count: {count}</>\n}\n')),Object(s.b)("p",null,"Something to note is that a subscription on the underlying observable must be present before the hook is executed. We can use ",Object(s.b)("inlineCode",{parentName:"p"},"Subscribe")," to help us with it:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"function CharacterCounter() {\n  return (\n    <div>\n      <Subscribe>\n        <TextInput />\n        <CharacterCount />\n      </Subscribe>\n    </div>\n  )\n}\n")),Object(s.b)("p",null,"The interactive result:"),Object(s.b)(f.a,{mdxType:"BrowserOnly"},(function(){return Object(s.b)(C,{mdxType:"CharacterCounter"})})),Object(s.b)("h2",{id:"next-steps"},"Next steps"),Object(s.b)("p",null,"We strongly recommend reading through ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/core-concepts"}),"core concepts")," to\nunderstand the mindset of this library."))}w.isMDXComponent=!0}}]);